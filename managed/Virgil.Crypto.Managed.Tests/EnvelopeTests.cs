using System.Collections.Generic;
using System.Linq;
using Org.BouncyCastle.Asn1;
using Virgil.SDK.Cryptography.ASN1.Models;
using Xunit;

namespace Virgil.SDK.Cryptography.Tests
{
	public class EnvelopeTests
	{
		[Fact]
		public void Parse()
		{
			var dataoBytes();
			var envelop = Envelope.GetInstance(Asn1Object.FromByteArray(data));

			Assert.NotNull(envelop.Nonce);
			var recipients = envelop.Recipients.ToArray();
			Assert.Equal(2,recipients.Length);
			Assert.IsType<PasswordRecipient>(recipients[1]);
			Assert.IsType<PublicKeyRecipient>(recipients[0]);
		}

		[Fact]
		public void Compose()
		{
			var expectedoBytes();
			var passwordRecipient = Asn1Object.FromByteArray("a38197308194020100305d06092a864886f70d01050d3050302f06092a864886f70d01050c302204101da7ecd2b9c975becf3d63718fe81a4b02021eac300a06082a864886f70d020a301d060960864801650304012a041016d6e59a90a6d417f26337449bd0fd170430a90dd3caa491406f72047a3c36b1717b7950528dc5062ec62891e612a25a9b166c62b9223a75d4fa8ebde9ed0309133f".ToBytes());
			var publicKeyRecipient = Asn1Object.FromByteArray("30820113020102a022042094dceeeff69664ef8a3cd84b46efd8ffad2225ba21bb33e0f5ec0656500204eb300506032b65700481e23081df020100302a300506032b657003210071c058d9b008b3d6e97a37e844d158e8e5c291f8bbbd92912749e1cd75c732db3018060728818c71020502300d060960864801650304020205003041300d060960864801650304020205000430498d5ec673cc89080d69158cff8c84dbc94ded8c3cbdeefc9385a65733385942e4a8cf12c27e1d0389a602a2e448aa003051301d060960864801650304012a041015f3e2cefab6c12907a4cbf62d5d91d30430d6f0cfa9bfe0c0dd1f8af978245ddf434e8319b02cda16ab53afec3d9d16f631f2a66dabb970a3318e0bf2beddb08a9c".ToBytes());
			var actual = new Envelope(new[]
				{					
					publicKeyRecipient,
					passwordRecipient,
				},
				new Nonce("BA53BCA050B80D9EB7A1C9BF".ToBytes()))
			.GetDerEncoded();

			Assert.Equal(expected,actual);
		}

		[Fact]
		public void ParseSign()
		{
			var dataoBytes();
			var expected = "3051300D060960864801650304020205000440D89A7967C64B0F51177BD426AA551C0545158DE25D6178BBEAEF2F722A7238A43B147BCDA80548F31095CA05DAB8201671D73AA55C6A984A6DB25458CA406E00".ToBytes();
			var envelop = Envelope.GetInstance(data);
			Assert.True(envelop.CustomParams.ContainsKey("VIRGIL-DATA-SIGNATURE"));
			Assert.Equal(expected,envelop.CustomParams["VIRGIL-DATA-SIGNATURE"]);
		}

		[Fact]
		public void ComposeSign()
		{
			var expectedoBytes();
			var publicKeyRecipient = Asn1Object.FromByteArrayoBytes());
			var sign = "3051300D060960864801650304020205000440D89A7967C64B0F51177BD426AA551C0545158DE25D6178BBEAEF2F722A7238A43B147BCDA80548F31095CA05DAB8201671D73AA55C6A984A6DB25458CA406E00".ToBytes();
			var actual = new Envelope(new[]
				{
					publicKeyRecipient,
				},
new Nonce("2535508A144DC510628FD57B".ToBytes()),
				new Dictionary<string, object>
				{
					{"VIRGIL-DATA-SIGNATURE",sign }
				})
			.GetDerEncoded();

			Assert.Equal(expected, actual);
		}
	}
}