using Org.BouncyCastle.Asn1;
using Virgil.SDK.Cryptography.ASN1.Models;
using Xunit;

namespace Virgil.SDK.Cryptography.Tests
{
	public class PasswordRecipientTests
	{
		[Fact]
		public void Parse()
		{
			var expected = "A38197308194020100305D06092A864886F70D01050D3050302F06092A864886F70D01050C302204102F50C96947F79B3443FDE2AF5DA4C7F302020E94300A06082A864886F70D020A301D060960864801650304012A0410A2D63F55A73FCA3C9E3FE7600BFAA06604307186BD2E14CE94A4B28CDAF55AC1ABF585FF6175E0FC467D42215357E95265B3E8C3A0DAFA29768D7C6BFAA28680D92E".ToBytes();
			var kdfIv = "2F50C96947F79B3443FDE2AF5DA4C7F3".ToBytes();
			var iterations = 3732;
			var keyIv = "A2D63F55A73FCA3C9E3FE7600BFAA066".ToBytes();
			var encryptedKey = "7186BD2E14CE94A4B28CDAF55AC1ABF585FF6175E0FC467D42215357E95265B3E8C3A0DAFA29768D7C6BFAA28680D92E".ToBytes();
			var actual = new PasswordRecipient(kdfIv,iterations,keyIv,encryptedKey).GetDerEncoded();

			Assert.Equal(expected,actual);
		}


		[Fact]
		public void Compose()
		{
			var data = "A38197308194020100305D06092A864886F70D01050D3050302F06092A864886F70D01050C302204102F50C96947F79B3443FDE2AF5DA4C7F302020E94300A06082A864886F70D020A301D060960864801650304012A0410A2D63F55A73FCA3C9E3FE7600BFAA06604307186BD2E14CE94A4B28CDAF55AC1ABF585FF6175E0FC467D42215357E95265B3E8C3A0DAFA29768D7C6BFAA28680D92E".ToBytes();
			var m = PasswordRecipient.GetInstance(Asn1Object.FromByteArray(data));
			var kdfIv = "2F50C96947F79B3443FDE2AF5DA4C7F3".ToBytes();
			var iterations = 3732;
			var keyIv = "A2D63F55A73FCA3C9E3FE7600BFAA066".ToBytes();
			var encryptedKey = "7186BD2E14CE94A4B28CDAF55AC1ABF585FF6175E0FC467D42215357E95265B3E8C3A0DAFA29768D7C6BFAA28680D92E".ToBytes();
			
			Assert.Equal(kdfIv, m.KdfIV);
			Assert.Equal(iterations, m.Iterations);
			Assert.Equal(keyIv, m.KeyIV);
			Assert.Equal(encryptedKey, m.EncryptedKey);
		}
	}
}