using Org.BouncyCastle.Asn1;
using Virgil.SDK.Cryptography.ASN1.Models;
using Xunit;

namespace Virgil.SDK.Cryptography.Tests
{
	public class VirgilSignTest
	{
		[Fact]
		public void Parse()
		{
			var expected = "D89A7967C64B0F51177BD426AA551C0545158DE25D6178BBEAEF2F722A7238A43B147BCDA80548F31095CA05DAB8201671D73AA55C6A984A6DB25458CA406E00".ToBytes();
			var data = "3051300D060960864801650304020205000440D89A7967C64B0F51177BD426AA551C0545158DE25D6178BBEAEF2F722A7238A43B147BCDA80548F31095CA05DAB8201671D73AA55C6A984A6DB25458CA406E00".ToBytes();
			var sign = VirgilSign.GetInstance(Asn1Object.FromByteArray(data));

			Assert.Equal(expected,sign.Sign);
		}

		[Fact]
		public void Compose()
		{
			var sign = "D89A7967C64B0F51177BD426AA551C0545158DE25D6178BBEAEF2F722A7238A43B147BCDA80548F31095CA05DAB8201671D73AA55C6A984A6DB25458CA406E00".ToBytes();
			var expected = "3051300D060960864801650304020205000440D89A7967C64B0F51177BD426AA551C0545158DE25D6178BBEAEF2F722A7238A43B147BCDA80548F31095CA05DAB8201671D73AA55C6A984A6DB25458CA406E00".ToBytes();
			var actula = new VirgilSign(sign).GetDerEncoded();

			Assert.Equal(expected,actula);
		}
	}
}